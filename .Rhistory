make_sim_circle(bb, 0.25)
bb <- make_many_circ(500, sigma_mat = cov_mat, 1000, 20, 2, 200, 2)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(500, sigma_mat = cov_mat, 1000, 20, "max", 200, 2)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(500, sigma_mat = cov_mat, 1000, 20, 4, 200, 2)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(500, sigma_mat = cov_mat, 1000, 20, 4, 200, 4)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(500, sigma_mat = cov_mat, 1000, 20, "max", 200, 4)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(1000, sigma_mat = cov_mat, 1000, 20, "max", 200, 4)
make_sim_circle(bb, 0.25)
cov_mat
cov_mat[1, 3] <- cov_mat[3, 1] <- 0.1
bb <- make_many_circ(1000, sigma_mat = cov_mat, 1000, 20, "max", 200, 4)
make_sim_circle(bb, 0.25)
cov_mat[1, 3] <- cov_mat[3, 1] <- 0.4
bb <- make_many_circ(1000, sigma_mat = cov_mat, 1000, 20, "max", 200, 4)
make_sim_circle(bb, 0.25)
cov_mat[1, 3] <- cov_mat[3, 1] <- 0.8
bb <- make_many_circ(1000, sigma_mat = cov_mat, 1000, 20, "max", 200, 4)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(1000, sigma_mat = cov_mat, 1000, 20, 2, 200, 4)
make_sim_circle(bb, 0.25)
cov_mat
cov_mat_2 <- cov_mat
cov_mat <- diag(3)
bb <- make_many_circ(1000, sigma_mat = cov_mat, 1000, 20, 2, 200, 4)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(1000, sigma_mat = cov_mat, 1000, 20, "max", 200, 4)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(1000, sigma_mat = cov_mat, 1000, 20, "max", 200, 2)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(1000, sigma_mat = cov_mat, 1000, 20, "max", 200, 2)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(1000, sigma_mat = cov_mat, 1000, 20, 2, 200, 2)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(1000, sigma_mat = cov_mat, 1000, 20, 2, 200, 3)
make_sim_circle(bb, 0.25)
points(c(0, 0), pty = "SWAG")
points(c(0), c(0), pty = "SWAG")
points(c(0), c(0), pch = "SWAG", )
text(0, 0, "SWAG")
text(0, 0, 2. 5)
text(0, 0, 2.5)
text(0, 0, 2.5, size = 5)
text(0, 0, 2.5, cex = 5)
text(0, 0, 2.5, cex = 5)
make_sim_circle(bb, 0.25)
text(0, 0, 2.5, cex = 5)
make_sim_circle <- function(circ_mat, line_wd){
num_obs <- ncol(circ_mat)
steps <- seq(from = 0, to = 2 * pi, length.out = num_obs)
xcords <- circ_mat[1, ] * cos(steps)
ycords <- circ_mat[1, ] * sin(steps)
plot(xcords, ycords, asp=1, type = "l", lwd = line_wd)
for(i in 2:nrow(circ_mat)){
xcords_i <- circ_mat[i, ] * cos(steps)
ycords_i <- circ_mat[i, ] * sin(steps)
lines(xcords_i, ycords_i, lwd = line_wd)
mpi <- which.min(circ_mat[i, ])
lines(c(0, xcords_i[mpi]), c(0, ycords_i[mpi]), lwd = line_wd)
}
all_means <- apply(circ_mat, 2, mean)
xcords_mean <- all_means * cos(steps)
ycords_mean <- all_means * sin(steps)
lines(xcords_mean, ycords_mean, lwd = 2, col = "red")
in_circ_x <- min(all_means) * cos(steps)
in_circ_y <- min(all_means) * sin(steps)
lines(in_circ_x, in_circ_y, lwd = 2, col = "blue")
text(0, 0, min(all_means), cex = 5)
}
make_sim_circle(bb, 0.25)
make_sim_circle <- function(circ_mat, line_wd){
num_obs <- ncol(circ_mat)
steps <- seq(from = 0, to = 2 * pi, length.out = num_obs)
xcords <- circ_mat[1, ] * cos(steps)
ycords <- circ_mat[1, ] * sin(steps)
plot(xcords, ycords, asp=1, type = "l", lwd = line_wd)
for(i in 2:nrow(circ_mat)){
xcords_i <- circ_mat[i, ] * cos(steps)
ycords_i <- circ_mat[i, ] * sin(steps)
lines(xcords_i, ycords_i, lwd = line_wd)
mpi <- which.min(circ_mat[i, ])
lines(c(0, xcords_i[mpi]), c(0, ycords_i[mpi]), lwd = line_wd)
}
all_means <- apply(circ_mat, 2, mean)
xcords_mean <- all_means * cos(steps)
ycords_mean <- all_means * sin(steps)
lines(xcords_mean, ycords_mean, lwd = 2, col = "red")
in_circ_x <- min(all_means) * cos(steps)
in_circ_y <- min(all_means) * sin(steps)
lines(in_circ_x, in_circ_y, lwd = 2, col = "blue")
text(0, 0, round(min(all_means), 4) * 100, cex = 5)
}
make_sim_circle(bb, 0.25)
make_sim_circle <- function(circ_mat, line_wd){
num_obs <- ncol(circ_mat)
steps <- seq(from = 0, to = 2 * pi, length.out = num_obs)
xcords <- circ_mat[1, ] * cos(steps)
ycords <- circ_mat[1, ] * sin(steps)
plot(xcords, ycords, asp=1, type = "l", lwd = line_wd)
for(i in 2:nrow(circ_mat)){
xcords_i <- circ_mat[i, ] * cos(steps)
ycords_i <- circ_mat[i, ] * sin(steps)
lines(xcords_i, ycords_i, lwd = line_wd)
mpi <- which.min(circ_mat[i, ])
lines(c(0, xcords_i[mpi]), c(0, ycords_i[mpi]), lwd = line_wd)
}
all_means <- apply(circ_mat, 2, mean)
xcords_mean <- all_means * cos(steps)
ycords_mean <- all_means * sin(steps)
lines(xcords_mean, ycords_mean, lwd = 2, col = "red")
in_circ_x <- min(all_means) * cos(steps)
in_circ_y <- min(all_means) * sin(steps)
lines(in_circ_x, in_circ_y, lwd = 2, col = "blue")
text(0, 0, round(min(all_means), 4), cex = 5)
}
make_sim_circle(bb, 0.25)
cov_mat_2
cov_mat_2[3, 2] <- cov_mat_2[2, 3] <- 0
cov_mat_2
cov_mat_2[1, 3] <- cov_mat_2[3, 1] <- 0
cov_mat_2
par(mfrow = c(1, 2))
bb <- make_many_circ(1000, sigma_mat = cov_mat_2, 1000, 20, 2, 200, 1)
make_sim_circle(bb, 0.25)
bb <- make_many_circ(1000, sigma_mat = cov_mat_2, 1000, 20, "max", 200, 1)
make_sim_circle(bb, 0.25)
make_sim_circle <- function(circ_mat, line_wd, param){
num_obs <- ncol(circ_mat)
steps <- seq(from = 0, to = 2 * pi, length.out = num_obs)
xcords <- circ_mat[1, ] * cos(steps)
ycords <- circ_mat[1, ] * sin(steps)
plot(xcords, ycords, asp=1, type = "l", lwd = line_wd,
main = paste0("Norm = ", param[1], ", r = ", param[2]))
for(i in 2:nrow(circ_mat)){
xcords_i <- circ_mat[i, ] * cos(steps)
ycords_i <- circ_mat[i, ] * sin(steps)
lines(xcords_i, ycords_i, lwd = line_wd)
mpi <- which.min(circ_mat[i, ])
lines(c(0, xcords_i[mpi]), c(0, ycords_i[mpi]), lwd = line_wd)
}
all_means <- apply(circ_mat, 2, mean)
xcords_mean <- all_means * cos(steps)
ycords_mean <- all_means * sin(steps)
lines(xcords_mean, ycords_mean, lwd = 2, col = "red")
in_circ_x <- min(all_means) * cos(steps)
in_circ_y <- min(all_means) * sin(steps)
lines(in_circ_x, in_circ_y, lwd = 2, col = "blue")
text(0, 0, round(min(all_means), 4), cex = 5)
}
make_two_circles <- function(ss, sigma_mat, r){
l_2_circles <- make_many_circ(ss = ss, sigma_mat = sigma_mat, 1000, 20, 2, 200, r = r)
make_sim_circle(l_2_circles, 0.25, c("L_2", r))
max_circles <- make_many_circ(ss = ss, sigma_mat = sigma_mat, 1000, 20, "max", 200, r = r)
make_sim_circle(l_2_circles, 0.25, c("Max", r))
}
make_two_circles(500, cov_mat, 1)
make_two_circles(500, cov_mat, 1)
make_two_circles(500, cov_mat, 2)
make_two_circles(500, cov_mat, 3)
make_two_circles(500, cov_mat_2, 1)
make_two_circles(500, cov_mat, 1)
make_two_circles(500, cov_mat, 2)
make_two_circles <- function(ss, sigma_mat, r){
l_2_circles <- make_many_circ(ss = ss, sigma_mat = sigma_mat, 1000, 20, 2, 200, r = r)
make_sim_circle(l_2_circles, 0.25, c("L_2", r))
max_circles <- make_many_circ(ss = ss, sigma_mat = sigma_mat, 1000, 20, "max", 200, r = r)
make_sim_circle(max_circles, 0.25, c("Max", r))
}
make_two_circles(500, cov_mat, 1)
make_two_circles(500, cov_mat, 2)
make_two_circles(500, cov_mat, 3)
cov_mat_2[1, 2] <- cov_mat_2[2, 1] <- 0.8
cov_mat_2 <- diag(3)
cov_mat_2[1, 2] <- cov_mat_2[2, 1] <- 0.8
cov_mat_3 <- matrix(0.8, nrow = 3, ncol = 3)
diag(cov_mat_3) <- 1
make_two_circles(500, cov_mat_2, 1)
make_two_circles(500, cov_mat_2, 3)
make_two_circles(500, cov_mat_2, 2)
make_two_circles(500, cov_mat_3, 1)
make_two_circles(500, cov_mat_3, 3)
make_two_circles(500, cov_mat_3, 2)
make_two_circles(500, cov_mat_3, 5)
make_two_circles(500, cov_mat_3, 10)
cov_mat_2
cov_mat_3
#########################################################
#### Author : Adam Elder
#### This script contains the code used to read in
#### simulation results for the fourth and fifth figure.
#########################################################
setwd("/Users/adamelder/Dropbox/Spring\ 2018/BIOSTAT572/SimulationStudy/BIOSTAT572R")
read_one <- function(params, file_name){
est_rej <- read.csv(file_name)[,2]
est_rej <- est_rej[ -length(est_rej)]
num_reps <- length(est_rej)
param_mat <- data.frame("b0" = rep(params[1], num_reps),
"dims" = rep(params[2], num_reps),
"db" = rep(params[3], num_reps))
rej_df <- as.data.frame(cbind(param_mat, est_rej))
colnames(rej_df) <- c("b0", "dims", "db", "rejr")
return(rej_df)
}
read_params <- function(ss, b, dim, db){
file_name_start <- paste0("simres2/sim_dim_", dim, "ss_", ss, "b0_", b, "iter_")
file_name_end   <- paste0("lambda", db)
for(i in 1:2){
iter_i <- paste0(file_name_start, i, file_name_end, ".csv")
if(file.exists(iter_i)){
res_i <- read_one(c(b, dim, db), iter_i)
if (exists("results")){
results <- rbind(results, res_i)
}else{
results <- res_i
}
}
}
return(results)
}
local_param <- rep(seq(0, 5, 0.5), times = 6)
sample_size <- c(rep(5000, 22), rep(10000, 44))
dims <- c(rep(c(10, 50, 1000, 1000, 1000, 1000), each = 11))
sims <- c(rep(10, 22), rep(20, 44))/2
db <- rep(c("db", "db", "4.3", "6.1", "6.8", "8.6"), each = 11)
simulate_df <- data.frame("b_0" = local_param, "n" = sample_size,
"dims" = dims, "sims" = sims, "db" = as.character(db))
simulate_df$db <- db
n_ests <- sum(simulate_df$sims) * 2
mast_indx <- cumsum(simulate_df$sims) * 2
master_mat <- as.data.frame(matrix(0, nrow = n_ests, ncol = 4))
settings <- simulate_df[1, ]
master_mat <- read_params(ss = settings$sims,
b = settings$b_0,
dim = settings$dims,
db = settings$db)
for(i in 2:66){
settings <- simulate_df[i, ]
i_mat <- read_params(ss = settings$sims,
b = settings$b_0,
dim = settings$dims,
db = settings$db)
master_mat <- rbind(master_mat, i_mat)
}
ggplot(subset, aes(x = b0, group = b0, y = rejr)) + geom_boxplot() +
geom_point(data = points, colour = "red", alpha = 0.5)
source("Sim_Study.R")
source("Testing.R")
gen_bonf_one <- function(b0, ss, sqrt_mat){
gen_data <- make_data_loc(ss = ss, mat = sqrt_mat, b = b0)
test <- test.once.bc(data = gen_data, alpha = 0.05)
return(test)
}
gen_many_bonf <- function(b0, dim, ss, sims){
x_cov <- matrix(0.5, nrow = dim, ncol = dim)
diag(x_cov) <- 1
sqrt_mat <- sqrtm(x_cov)
rej_vec <- rep(NA, sims)
for(rej_indx in 1:sims){
cat(rej_indx)
rej_vec[rej_indx] <- gen_bonf_one(b0 = b0, ss = ss, sqrt_mat = sqrt_mat)
}
return(mean(rej_vec))
}
gen_many_bonf(1, 100, 100, 10)
library(expm)
library(ggplot2)
gen_many_bonf(1, 100, 100, 10)
gen_many_bonf(1, 1000, 100, 10)
gen_many_bonf(1, 500, 100, 10)
gen_many_bonf(1, 500, 1000, 10)
gen_many_bonf(4, 500, 1000, 10)
gen_many_bonf(4, 500, 1000, 10)
gen_many_bonf(4, 10, 5000, 100)
gen_many_bonf(4, 10, 5000, 1000)
gen_many_bonf(5, 10, 5000, 1000)
gen_many_bonf(5, 1000, 10000, 1000)
1000/4
1000/(4 * 60)
bb <- as.factor(c(1, 2, 3, 4, 5, 5, 4, 3, 1, 2))
bb == "1"
bb == 1
bb <- as.factor(c(7, 2, 3, 4, 5, 5, 4, 3, 1, 2))
bb == "1"
bb == 1
setwd("~/Dropbox/School_UW/2017-2018/Spring 2018/BIOSTAT572/SimulationStudy/BIOSTAT572R")
source("ART.R")
source("bbV.R")
source("findlambda.R")
source("get_max_beta.R")
source("Sim_Study.R")
source("Simulate_1.R")
source("sortlambda.R")
source("Testing.R")
library(MASS)
simulate_test <- function(b0, n, dim, sims, alpha, lamb){
x_cov <- matrix(0.5, nrow = dim, ncol = dim)
diag(x_cov) <- 1
sqrt_mat <- sqrtm(x_cov)
start_time <- Sys.time()
test_res <- rep(NA, nrow = sims)
for(sim_indx in 1:sims){
sim_data <- make_data_loc(ss = n, mat = sqrt_mat, b = b0)
test_res[sim_indx] <- art_find_distr(sim_data, 500, lambda = lamb, 500, alpha = alpha)
if(sim_indx%%100 == 0){
time.dif <- as.numeric(Sys.time() - start_time)/(60**2)
cat(sim_indx, " Simulations have been completed taking ", time.dif, "hours \n")
}
}
print(Sys.time() - start_time)
print(as.numeric(Sys.time() - start_time))
rej.rate <- mean(test_res)
names(rej.rate) <- c("ART")
return(rej.rate)
}
test_1 <- c(0, 10000, 1000, 10, 0.05)
test_2 <- c(3, 5000, 10, 10, 0.05)
syst.envr <- as.numeric(Sys.getenv("SGE_TASK_ID"))
if(!is.na(syst.envr)){
job.id <- as.numeric(Sys.getenv("SGE_TASK_ID"))
}else{
cat("No Job ID found, choosing the answer to life the universe and everything \n")
job.id <- 42
}
if (job.id %% 2 == 0){
job.settings <- test_1
lamb.settings <- 4.3
}else{
job.settings <- test_2
lamb.settings <- "db"
}
cat("Job ID = ", job.id, "simulation Settings : ")
print(job.settings)
results <- simulate_test(b0 = job.settings[1],
n     = job.settings[2],
dim   = job.settings[3],
sims  = job.settings[4],
alpha = 0.05,
lamb = lamb.settings)
write.csv(results, paste0("simres4/test",job.id %% 2, "job_", floor(job.id/2) + 1, ".csv"))
setwd("~/Dropbox/Spring 2018/BIOSTAT572/SimulationStudy/BIOSTAT572R")
source("ART.R")
source("bbV.R")
source("findlambda.R")
source("get_max_beta.R")
source("Sim_Study.R")
source("Simulate_1.R")
source("sortlambda.R")
source("Testing.R")
library(MASS)
library(expm)
simulate_test <- function(b0, n, dim, sims, alpha, lamb){
x_cov <- matrix(0.5, nrow = dim, ncol = dim)
diag(x_cov) <- 1
sqrt_mat <- sqrtm(x_cov)
start_time <- Sys.time()
test_res <- rep(NA, nrow = sims)
for(sim_indx in 1:sims){
sim_data <- make_data_loc(ss = n, mat = sqrt_mat, b = b0)
test_res[sim_indx] <- art_find_distr(sim_data, 500, lambda = lamb, 500, alpha = alpha)
if(sim_indx%%100 == 0){
time.dif <- as.numeric(Sys.time() - start_time)/(60**2)
cat(sim_indx, " Simulations have been completed taking ", time.dif, "hours \n")
}
}
print(Sys.time() - start_time)
print(as.numeric(Sys.time() - start_time))
rej.rate <- mean(test_res)
names(rej.rate) <- c("ART")
return(rej.rate)
}
test_1 <- c(0, 10000, 1000, 10, 0.05)
test_2 <- c(3, 5000, 10, 10, 0.05)
syst.envr <- as.numeric(Sys.getenv("SGE_TASK_ID"))
if(!is.na(syst.envr)){
job.id <- as.numeric(Sys.getenv("SGE_TASK_ID"))
}else{
cat("No Job ID found, choosing the answer to life the universe and everything \n")
job.id <- 42
}
if (job.id %% 2 == 0){
job.settings <- test_1
lamb.settings <- 4.3
}else{
job.settings <- test_2
lamb.settings <- "db"
}
cat("Job ID = ", job.id, "simulation Settings : ")
print(job.settings)
results <- simulate_test(b0 = job.settings[1],
n     = job.settings[2],
dim   = job.settings[3],
sims  = job.settings[4],
alpha = 0.05,
lamb = lamb.settings)
setwd("~/Dropbox/Spring 2018/BIOSTAT572/SimulationStudy/BIOSTAT572R")
library(MASS)
library(expm)
source("ART.R")
source("bbV.R")
source("findlambda.R")
source("get_max_beta.R")
source("Sim_Study.R")
source("Simulate_1.R")
source("sortlambda.R")
source("Testing.R")
simulate_test <- function(b0, n, dim, sims, alpha, lamb){
x_cov <- matrix(0.5, nrow = dim, ncol = dim)
diag(x_cov) <- 1
sqrt_mat <- sqrtm(x_cov)
start_time <- Sys.time()
test_res <- rep(NA, nrow = sims)
for(sim_indx in 1:sims){
sim_data <- make_data_loc(ss = n, mat = sqrt_mat, b = b0)
test_res[sim_indx] <- art_find_distr(sim_data, 500, lambda = lamb, 500, alpha = alpha)
if(sim_indx%%100 == 0){
time.dif <- as.numeric(Sys.time() - start_time)/(60**2)
cat(sim_indx, " Simulations have been completed taking ", time.dif, "hours \n")
}
}
print(Sys.time() - start_time)
print(as.numeric(Sys.time() - start_time))
rej.rate <- mean(test_res)
names(rej.rate) <- c("ART")
return(rej.rate)
}
test_1 <- c(0, 10000, 1000, 10, 0.05)
test_2 <- c(3, 5000, 10, 10, 0.05)
syst.envr <- as.numeric(Sys.getenv("SGE_TASK_ID"))
if(!is.na(syst.envr)){
job.id <- as.numeric(Sys.getenv("SGE_TASK_ID"))
}else{
cat("No Job ID found, choosing the answer to life the universe and everything \n")
job.id <- 42
}
if (job.id %% 2 == 0){
job.settings <- test_1
lamb.settings <- 4.3
}else{
job.settings <- test_2
lamb.settings <- "db"
}
cat("Job ID = ", job.id, "simulation Settings : ")
print(job.settings)
results <- simulate_test(b0 = job.settings[1],
n     = job.settings[2],
dim   = job.settings[3],
sims  = job.settings[4],
alpha = 0.05,
lamb = lamb.settings)
setwd("~/Dropbox/Spring 2018/BIOSTAT572/SimulationStudy/BIOSTAT572R")
library(MASS)
library(expm)
source("ART.R")
source("bbV.R")
source("findlambda.R")
source("get_max_beta.R")
source("Sim_Study.R")
source("Simulate_1.R")
source("sortlambda.R")
source("Testing.R")
simulate_test <- function(b0, n, dim, sims, alpha, lamb){
x_cov <- matrix(0.5, nrow = dim, ncol = dim)
diag(x_cov) <- 1
sqrt_mat <- sqrtm(x_cov)
start_time <- Sys.time()
test_res <- rep(NA, nrow = sims)
for(sim_indx in 1:sims){
sim_data <- make_data_loc(ss = n, mat = sqrt_mat, b = b0)
test_res[sim_indx] <- art_find_distr(sim_data, 500, lambda = lamb, 500, alpha = alpha)
if(sim_indx%%100 == 0){
time.dif <- as.numeric(Sys.time() - start_time)/(60**2)
cat(sim_indx, " Simulations have been completed taking ", time.dif, "hours \n")
}
}
print(Sys.time() - start_time)
print(as.numeric(Sys.time() - start_time))
rej.rate <- mean(test_res)
names(rej.rate) <- c("ART")
return(rej.rate)
}
test_1 <- c(0, 10000, 1000, 10, 0.05)
test_2 <- c(3, 5000, 10, 10, 0.05)
syst.envr <- as.numeric(Sys.getenv("SGE_TASK_ID"))
if(!is.na(syst.envr)){
job.id <- as.numeric(Sys.getenv("SGE_TASK_ID"))
}else{
cat("No Job ID found, choosing the answer to life the universe and everything \n")
job.id <- 42
}
if (job.id %% 2 == 0){
job.settings <- test_1
lamb.settings <- 4.3
}else{
job.settings <- test_2
lamb.settings <- "db"
}
job.settings <- c(0, 10, 10, 10, 0.05)
cat("Job ID = ", job.id, "simulation Settings : ")
print(job.settings)
results <- simulate_test(b0 = job.settings[1],
n     = job.settings[2],
dim   = job.settings[3],
sims  = job.settings[4],
alpha = 0.05,
lamb = lamb.settings)
write.csv(results, paste0("simres4/test",job.id %% 2, "job_", floor(job.id/2) + 1, ".csv"))
results
par()$mai
