cors <- crossprod(s.data[, -1], s.data[, 1])
cors.2 <- rep(NA, covs)
cors.3 <- crossprod(s.data.2[, -1], s.data.2[, 1])
y.vec <- data[, 1]
y.mean <- mean(y.vec)
one.v <- rep(1/ss, ss)
for(jj in 2:(covs + 1)){
x_val <- data[, jj]
three_vals <- as.numeric(t(cbind(y.vec, x_val, one.v)) %*% x_val)
cov.j <- (three_vals[1] - ss * three_vals[3] * y.mean)/(ss - 1)
sd.j <- ((three_vals[2] - ss * three_vals[3]^2)/(ss - 1))**(1/2)
cors.2[jj - 1] <- as.numeric(cov.j)/as.numeric(sd.j)
}
max.k <- which.max(abs(cors)) + 1
max.k.2 <- which.max(abs(cors.2)) + 1
cat(max.k)
cat(max.k.2)
cat(cors[max.k])
cat(cors.2[max.k.2])
cat("\n")
print(t(cors))
print(cors.2)
print(cor(data[, 1], data[, -1]))
browser()
if(find_sd == TRUE){
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
rse <- sum((y.vec - as.numeric(X %*% betas))^2)/(ss - 2)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse))
}else{
est <- cors[max.k - 1] / sd(data[, max.k])
}
return(est)
}
find_max_cor_beta_2(mvrnorm(n = 100, mu = rep(0, 10), diag(10) + 1))
t(cors.3)
colSums(s.data.2)
colMeans(s.data.2)
colMeans(s.data.1)
colMeans(s.data)
s.data.2 <- data - rep(apply(data, 2, mean), each = ss)
colMeans(s.data.2)
s.data <- data - rep(colMeans(data), each = ss)
colMeans(s.data)
s.data <- s.data / sqrt(colSums(s.data^2))
cors <- crossprod(s.data[, -1], s.data[, 1])
t(cors)
cor(data[, 1], data[, -1])
cor(s.data[, 1], s.data[, -1])
cov(s.data[, 1], s.data[, -1])
cor(s.data.2)[, 1]
cor(s.data)[, 1]
cor(data)[, 1]
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / sqrt(colSums(s.data^2))
cor(s.data)[, 1]
s.data.2 <- data - rep(apply(data, 2, mean), each = ss)
s.data.2 <- data/ sqrt(apply(data, 2, function(x) sum(x^2)))
cor(s.data.2)[, 1]
s.data.2 <- data - rep(apply(data, 2, mean), each = ss)
s.data.2 <- s.data.2/ sqrt(apply(s.data.2, 2, function(x) sum(x^2)))
cor(s.data.2)[, 1]
cors.3
t(cors.3)
t(cors)
cor(data)[, 1]
cor(data)[-1 , 1]
cor(s.data)[-1 , 1]
cor(s.data.2)[-1 , 1]
s.data.2 <- data - rep(apply(data, 2, mean), each = ss)
cor(s.data.2)[-1 , 1]
s.data.2 <- s.data.2 / rep(sqrt(apply(s.data.2, 2, function(x) sum(x^2))), each = ss)
cor(s.data.2)[-1 , 1]
cor(data)[-1 , 1]
cors.3 <- crossprod(s.data.2[, -1], s.data.2[, 1])
cors.3
find_max_cor_beta_2 <- function(data, find_sd = FALSE){
covs <- ncol(data) - 1
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
cors.2 <- rep(NA, covs)
y.vec <- data[, 1]
y.mean <- mean(y.vec)
one.v <- rep(1/ss, ss)
for(jj in 2:(covs + 1)){
x_val <- data[, jj]
three_vals <- as.numeric(t(cbind(y.vec, x_val, one.v)) %*% x_val)
cov.j <- (three_vals[1] - ss * three_vals[3] * y.mean)/(ss - 1)
sd.j <- ((three_vals[2] - ss * three_vals[3]^2)/(ss - 1))**(1/2)
cors.2[jj - 1] <- as.numeric(cov.j)/as.numeric(sd.j)
}
max.k <- which.max(abs(cors)) + 1
max.k.2 <- which.max(abs(cors.2)) + 1
cat(max.k)
cat(max.k.2)
cat(cors[max.k])
cat(cors.2[max.k.2])
cat("\n")
print(t(cors))
print(cors.2)
print(cor(data[, 1], data[, -1]))
browser()
if(find_sd == TRUE){
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
rse <- sum((y.vec - as.numeric(X %*% betas))^2)/(ss - 2)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse))
}else{
est <- cors[max.k - 1] / sd(data[, max.k])
}
return(est)
}
find_max_cor_beta_2(mvrnorm(n = 100, mu = rep(0, 10), diag(10) + 1))
cors.2
cors
t(cors)
cor(data)[-1, 1]
find_max_cor_beta_2 <- function(data, find_sd = FALSE){
covs <- ncol(data) - 1
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
max.k <- which.max(abs(cors)) + 1
if(find_sd == TRUE){
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
rse <- sum((y.vec - as.numeric(X %*% betas))^2)/(ss - 2)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse))
}else{
est <- cors[max.k - 1] / sd(data[, max.k])
}
return(est)
}
find_max_cor_beta_2(mvrnorm(n = 100, mu = rep(0, 10), diag(10) + 1))
for(i in 1:1000){}
for(i in 1:1000){
gg <- find_max_cor_beta_2(mvrnorm(n = 100, mu = rep(0, 10), diag(10) + 1))
}
for(i in 1:1000){
gg <- find_max_cor_beta(mvrnorm(n = 100, mu = rep(0, 10), diag(10) + 1))
}
for(i in 1:10000){
gg <- find_max_cor_beta_2(mvrnorm(n = 100, mu = rep(0, 10), diag(10) + 1))
}
for(i in 1:10000){
gg <- find_max_cor_beta(mvrnorm(n = 100, mu = rep(0, 10), diag(10) + 1))
}
for(i in 1:1000){
gg <- find_max_cor_beta(mvrnorm(n = 100, mu = rep(0, 200), diag(10) + 1))
}
for(i in 1:1000){
gg <- find_max_cor_beta(mvrnorm(n = 100, mu = rep(0, 200), diag(200)))
}
for(i in 1:1000){
gg <- find_max_cor_beta_2(mvrnorm(n = 100, mu = rep(0, 200), diag(200)))
}
find_max_cor_beta_2 <- function(data, find_sd = FALSE){
covs <- ncol(data) - 1
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
max.k <- which.max(abs(cors)) + 1
if(find_sd == TRUE){
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
rse <- sum((y.vec - as.numeric(X %*% betas))^2)/(ss - 2)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse))
}else{
est <- cors[max.k - 1] / sd(data[, max.k])
}
return(est)
}
for(i in 1:1000){ gg <- find_max_cor_beta_2(mvrnorm(n = 100, mu = rep(0, 200), diag(200) + 1))}
for(i in 1:1000){ gg <- mvrnorm(n = 100, mu = rep(0, 200), diag(200) + 1)
)
for(i in 1:1000){ gg <- mvrnorm(n = 100, mu = rep(0, 200), diag(200) + 1)}
bb <-
bb <- mvrnorm(n = 100, mu = rep(0, 200), diag(200) + 1)
for(i in 1:1000){ gg <- bb[sample(100, replace = TRUE), ]}
for(i in 1:1000){ gg <- find_max_cor_beta_2(bb[sample(100, replace = TRUE), ])}
for(i in 1:1000){ gg <- find_max_cor_beta(bb[sample(100, replace = TRUE), ])}
for(i in 1:10000){ gg <- find_max_cor_beta(bb[sample(100, replace = TRUE), ])}
for(i in 1:10000){ gg <- find_max_cor_beta_2(bb[sample(100, replace = TRUE), ])}
for(i in 1:1000){ gg <- find_max_cor_beta_2(bb[sample(100, replace = TRUE), ])}
for(i in 1:1000){ gg <- find_max_cor_beta_2(bb[sample(100, replace = TRUE), ])}
mean(2, 3)
mean(c(2, 3))
cumsum(c(1, 2, 3))
a <- c(1, 0, 0, 1, 0, 0, 1, 1, 1, 1)
b <- c(0, 0, 1, 0, 0, 0, 0, 1, 0, 0)
c <- a - b
cumsum(c(sum(a), c))
c
cumsum(c(sum(b), c))
rnorm(1)
4 < inf
4 < infinity
c <- 1:10
source("ART.R")
source("bbV.R")
source("findlambda.R")
setwd("~/Dropbox/School_UW/2017-2018/Spring 2018/BIOSTAT572/SimulationStudy/BIOSTAT572R")
################################################
#### This script is written to gives to find run
#### simulations after being called by a script
#### command.
################################################
################################################
#### Author : Adam Elder
################################################
################################################
setwd("~/Dropbox/School_UW/2017-2018/Spring 2018/BIOSTAT572/SimulationStudy/BIOSTAT572R")
source("ART.R")
source("bbV.R")
source("findlambda.R")
source("get_max_beta.R")
source("Sim_Study.R")
source("Simulate_1.R")
source("sortlambda.R")
source("Testing.R")
gen.data <- function(ss, local, covs){
x <- mvrnorm(n = ss, mu = rep(0, covs), Sigma = diag(covs) )
true.beta <- c(local/sqrt(ss), rep(0, covs - length(local)))
y <- rnorm(ss, sd = 1) + x %*% true.beta
return(data.frame("y" = y, "x" = x))
}
gen_est <- function(ss, local, covs){
obs_data <- gen.data(ss, local, covs)
return(find_max_cor_beta(obs_data), find_sd = FALSE)
}
ests <- mvrnorm(n = sims, mu = rep(0, covs), Sigma = diag(covs))
gen_limit_distr <- function(sims, local, covs){
ests <- mvrnorm(n = sims, mu = rep(0, covs), Sigma = diag(covs))
distr <- apply(ests, 1, function(x){x[which.max(x^2)]})
}
gen_limit_distr(10, 0, 10)
gen_limit_distr <- function(sims, covs){
ests <- mvrnorm(n = sims, mu = rep(0, covs), Sigma = diag(covs))
distr <- apply(ests, 1, function(x){x[which.max(x^2)]})
return(distr)
}
gen_limit_distr(10, 10)
gen_limit_distr(10, 10)
gen_limit_distr(10, 10)
hist(gen_limit_distr(1000, 10))
find_distr_null(sims, ss, covs){
distr <- rep(NA, sims)
for(i in 1:sims){
distr[i] <- gen_est(ss, 0, covs)
}
return(distr)
}
find_distr_null <- function(sims, ss, covs){
distr <- rep(NA, sims)
for(i in 1:sims){
distr[i] <- gen_est(ss, 0, covs)
}
return(distr)
}
find_distr_null(10, 100, 10)
gen_est(10, 0, 10)
gen_est(10, c(0), 10)
gen_est <- function(ss, local, covs){
obs_data <- gen.data(ss, local, covs)
return(find_max_cor_beta(obs_data, find_sd = FALSE))
}
gen_est(10, c(0), 10)
gen_est(10, c(0, 0), 10)
gen_est(100, c(0, 0), 10)
gen.data(10, 0, 10)
gen_est(10, c(0, 0), 10)
gen_est(100, c(0, 0), 10)
gen_est(100, c(0, 0), 10)
find_max_cor_beta(mvrnorm(n = 10, mu = rep(0, 5), Sigma = diag(5)))
find_max_cor_beta(mvrnorm(n = 10, mu = rep(0, 5), Sigma = diag(5)))
find_max_cor_beta(mvrnorm(n = 10, mu = rep(0, 5), Sigma = diag(5)))
find_max_cor_beta(mvrnorm(n = 10, mu = rep(0, 5), Sigma = diag(5)))
find_max_cor_beta(mvrnorm(n = 10, mu = rep(0, 5), Sigma = diag(5)), find_sd = FALSE)
find_max_cor_beta(mvrnorm(n = 10, mu = rep(0, 5), Sigma = diag(5)), find_sd = FALSE)
find_max_cor_beta(mvrnorm(n = 10, mu = rep(0, 5), Sigma = diag(5)), find_sd = FALSE)
find_max_cor_beta(mvrnorm(n = 10, mu = rep(0, 5), Sigma = diag(5)), find_sd = FALSE)
gen_est(10, c(0, 0), 10)
gen_est <- function(ss, local, covs){
obs_data <- gen.data(ss, local, covs)
browser()
return(find_max_cor_beta(obs_data, find_sd = FALSE))
}
gen_est(10, c(0, 0), 10)
gen.data <- function(ss, local, covs){
x <- mvrnorm(n = ss, mu = rep(0, covs), Sigma = diag(covs) )
true.beta <- c(local/sqrt(ss), rep(0, covs - length(local)))
y <- rnorm(ss, sd = 1) + x %*% true.beta
return(cbind("y" = y, "x" = x))
}
gen.data <- function(ss, local, covs){
x <- mvrnorm(n = ss, mu = rep(0, covs), Sigma = diag(covs) )
true.beta <- c(local/sqrt(ss), rep(0, covs - length(local)))
y <- rnorm(ss, sd = 1) + x %*% true.beta
return(cbind("y" = y, "x" = x))
}
gen_est <- function(ss, local, covs){
obs_data <- gen.data(ss, local, covs)
browser()
return(find_max_cor_beta(obs_data, find_sd = FALSE))
}
gen_est(10, c(0, 0), 10)
gen_est <- function(ss, local, covs){
obs_data <- gen.data(ss, local, covs)
return(find_max_cor_beta(obs_data, find_sd = FALSE))
}
find_distr_null <- function(sims, ss, covs){
distr <- rep(NA, sims)
for(i in 1:sims){
distr[i] <- sqrt(ss) * gen_est(ss, 0, covs)
}
return(distr)
}
find_distr_null(10, 100, 10)
find_distr_null(10, 100, 10)
find_distr_null(10, 100, 10)
sample_null <- find_distr_null(10000, 10, 10)
limit_null <- gen_limit_distr(10000, 10)
hist(sample_null)
hist(limit_null)
sample_null <- find_distr_null(1000, 10,0 10)
sample_null <- find_distr_null(1000, 100, 10)
hist(sample_null)
qqplot(sample_null, limit_null)
qqplot(sample_null, limit_null, "l")
qqplot(sample_null, limit_null, type = "l")
sample_null <- find_distr_null(1000, 1000, 10)
qqplot(sample_null, limit_null, type = "l")
sample_null <- find_distr_null(1000, 10000, 10)
qqplot(sample_null, limit_null, type = "l")
abline(0, 1)
abline(0, 1, col = "red")
sample_null <- find_distr_null(1000, 100000, 10)
qqplot(sample_null, limit_null, type = "l")
make_some_plots_3 <- function(sample_size, sims, covs){
limit_distr <-  gen_limit_distr(sims = sims, covs = covs)
sample_distr <- find_distr_null(sims = sims, ss = sample_size, covs = covs)
dat <- data.frame("val" = c(null_sample_distr, sample_distr),
"Generation Method" = rep(c( "Local Sample", "Null Sample"), each = sims))
dat <- subset(dat, val <= 5 & -7.5 <= val)
A <- ggplot(dat, aes(x = val, fill = Generation.Method)) +
scale_fill_discrete(name = "Generation Method : ",
labels = c("Null Sampling Distribution", "Local Sampling Distribution")) +
geom_density(alpha = .5, position="identity") +
labs(x = "\n Beta", y = "\n Density") + xlim(c(-7.5 , 5)) + ylim(c(0.0, 0.45)) +
theme_minimal() + theme(legend.position="top", text = element_text(size=20))
A
}
make_some_plots_3(100, 100, 10)
make_some_plots_3 <- function(sample_size, sims, covs){
limit_distr <-  gen_limit_distr(sims = sims, covs = covs)
sample_distr <- find_distr_null(sims = sims, ss = sample_size, covs = covs)
dat <- data.frame("val" = c(limit_distr, sample_distr),
"Generation Method" = rep(c( "Limiting Distribution", "Sampling Distribution"), each = sims))
dat <- subset(dat, val <= 5 & -7.5 <= val)
A <- ggplot(dat, aes(x = val, fill = Generation.Method)) +
scale_fill_discrete(name = "Generation Method : ",
labels = c("Null Sampling Distribution", "Local Sampling Distribution")) +
geom_density(alpha = .5, position="identity") +
labs(x = "\n Beta", y = "\n Density") + xlim(c(-7.5 , 5)) + ylim(c(0.0, 0.45)) +
theme_minimal() + theme(legend.position="top", text = element_text(size=20))
A
}
make_some_plots_3(100, 100, 10)
library(gglp)
library(ggplot2)
make_some_plots_3(100, 100, 10)
make_some_plots_3(1000, 100, 10)
make_some_plots_3 <- function(sample_size, sims, covs){
limit_distr <-  gen_limit_distr(sims = sims, covs = covs)
sample_distr <- find_distr_null(sims = sims, ss = sample_size, covs = covs)
dat <- data.frame("val" = c(limit_distr, sample_distr),
"Generation Method" = rep(c( "Limiting Distribution", "Sampling Distribution"), each = sims))
dat <- subset(dat, val <= 5 & -7.5 <= val)
A <- ggplot(dat, aes(x = val, fill = Generation.Method)) +
scale_fill_discrete(name = "Generation Method : ",
labels = c("Limiting Distribution", "Sampling Distribution")) +
geom_density(alpha = .5, position="identity") +
labs(x = "\n Beta", y = "\n Density") + xlim(c(-7.5 , 5)) + ylim(c(0.0, 0.45)) +
theme_minimal() + theme(legend.position="top", text = element_text(size=20))
A
}
make_some_plots_3 <- function(sample_size, sims, covs){
limit_distr <-  gen_limit_distr(sims = sims, covs = covs)
sample_distr <- find_distr_null(sims = sims, ss = sample_size, covs = covs)
dat <- data.frame("val" = c(limit_distr, sample_distr),
"Generation Method" = rep(c( "Limiting Distribution", "Sampling Distribution"), each = sims))
dat <- subset(dat, val <= 5 & -7.5 <= val)
A <- ggplot(dat, aes(x = val, fill = Generation.Method)) +
scale_fill_discrete(name = "Generation Method : ",
labels = c("Limiting Distribution", "Sampling Distribution")) +
geom_density(alpha = .5, position="identity") +
labs(x = "\n Beta", y = "\n Density") + xlim(c(-7.5 , 5)) + ylim(c(0.0, 0.45)) +
theme_minimal() + theme(legend.position="top", text = element_text(size=20))
A
}
make_some_plots_3(1000, 1000, 10)
make_some_plots_3(10000, 1000, 10)
make_some_plots_3(100000, 1000, 10)
make_some_plots_3 <- function(sample_size, sims, covs){
limit_distr <-  gen_limit_distr(sims = sims, covs = covs)
sample_distr <- find_distr_null(sims = sims, ss = sample_size, covs = covs)
dat <- data.frame("val" = c(limit_distr, sample_distr),
"Generation Method" = rep(c( "Limiting Distribution", "Sampling Distribution"), each = sims))
dat <- subset(dat, val <= 5 & -5 <= val)
A <- ggplot(dat, aes(x = val, fill = Generation.Method)) +
scale_fill_discrete(name = "Generation Method : ",
labels = c("Limiting Distribution", "Sampling Distribution")) +
geom_density(alpha = .5, position="identity") +
labs(x = "\n Beta", y = "\n Density") + xlim(c(-7.5 , 5)) + ylim(c(0.0, 0.45)) +
theme_minimal() + theme(legend.position="top", text = element_text(size=20))
A
}
make_some_plots_3(100000, 1000, 10)
make_some_plots_3 <- function(sample_size, sims, covs){
limit_distr <-  gen_limit_distr(sims = sims, covs = covs)
sample_distr <- find_distr_null(sims = sims, ss = sample_size, covs = covs)
dat <- data.frame("val" = c(limit_distr, sample_distr),
"Generation Method" = rep(c( "Limiting Distribution", "Sampling Distribution"), each = sims))
dat <- subset(dat, val <= 5 & -5 <= val)
A <- ggplot(dat, aes(x = val, fill = Generation.Method)) +
scale_fill_discrete(name = "Generation Method : ",
labels = c("Limiting Distribution", "Sampling Distribution")) +
geom_density(alpha = .5, position="identity") +
labs(x = "\n Beta", y = "\n Density") + xlim(c(-5 , 5)) + ylim(c(0.0, 0.45)) +
theme_minimal() + theme(legend.position="top", text = element_text(size=20))
A
}
make_some_plots_3(100000, 1000, 10)
make_some_plots_3(1000, 10000, 10)
make_some_plots_3(1000, 10000, 100)
make_some_plots_3(100, 10000, 100)
make_some_plots_3(100, 10000, 100)
A <- ggplot(sample_null, aes(x = val))
A <- ggplot(as.data.frame(x = sample_null), aes(x = val))
A + geom_density(alpha = 0.5)
A <- ggplot(as.data.frame(x = sample_null), aes(x = x))
A + geom_density(alpha = 0.5)
bb <- as.data.frame(x = sample_null)
View(bb)
bb <- as.data.frame("x" = sample_null)
View(bb)
names(bb) <- c("x")
View(bb)
A <- ggplot(bb, aes(x = x))
A + geom_density(alpha = 0.5)
A <- ggplot(bb, aes(x = x, fill = "red"))
A + geom_density(alpha = 0.5)
A + geom_density(alpha = 0.5) + theme_void()
A + geom_density(alpha = 0.5) + theme_void() + theme(legend.position="None")
data <- rnorm(1000)
bb$x <- data
A <- ggplot(bb, aes(x = x, fill = "red"))
A <- ggplot(bb, aes(x = x, fill = "blue"))
A + geom_density(alpha = 0.5) + theme_void() + theme(legend.position="None")
data <- rnorm(100000)
bb$x <- data
bb <- as.data.frame(data)
names(bb) <- c("x")
A <- ggplot(bb, aes(x = x, fill = "blue"))
A + geom_density(alpha = 0.5) + theme_void() + theme(legend.position="None")
data <- rnorm(10000000)
bb <- as.data.frame(data)
names(bb) <- c("x")
A <- ggplot(bb, aes(x = x, fill = "blue"))
A + geom_density(alpha = 0.5) + theme_void() + theme(legend.position="None")
data$cat <- c(rep(0, 999999), 1)
View(data)
ss <- c(rep(0, 999999), 1)
ss <- c(rep(0, 99999), 1)
ss <- c(rep(0, 9999999), 1)
data <- data.frame(bb, ss)
View(data)
A <- ggplot(data, aes(x = x, fill = ss))
A + geom_density(alpha = 0.5) + theme_void() + theme(legend.position="None")
data$ss <- as.factor(data$ss)
A <- ggplot(data, aes(x = x, fill = ss))
A + geom_density(alpha = 0.5) + theme_void() + theme(legend.position="None")
ss <- c(0, rep(1, 9999999))
data <- data.frame(bb, ss)
data$ss <- as.factor(data$ss)
A <- ggplot(data, aes(x = x, fill = ss))
A + geom_density(alpha = 0.5) + theme_void() + theme(legend.position="None")
A <- ggplot(data, aes(x = x))
A + geom_density(alpha = 0.5, color='darkblue') + theme_void() + theme(legend.position="None")
A + geom_density(alpha = 0.5, fill='darkblue') + theme_void() + theme(legend.position="None")
data <- c(limit_null, rnorm(10000))
hist(data)
data <- c(limit_null, rnorm(1000))
hist(data)
data <- c(limit_null, rnorm(3000))
hist(data)
A <- ggplot(data, aes(x = x))
data <- data.frame(data)
A <- ggplot(data, aes(x = data))
A + geom_density(alpha = 0.5, fill='purple') + theme_void() + theme(legend.position="None")
