}
}else{
while(num.abv > 0.95 & step <= n_obs){
num.abv <- num.abv + ord.dif[step]
step <- step + 1
}
}
browser()
return(ord.obs[step, 1])
}
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 100)
hist(observations[2, ])
hist(observations[3, ])
observations[3, ]
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 100)
hist(observations[, 3])
hist(observations[, 2])
step
sort_lambda <- function(observations, test_stat){
ord.obs <- observations[order(observations[, 1]), ]
ord.vnb <- as.numeric(ord.obs[, 2] > test_stat)
ord.cpb <- as.numeric(ord.obs[, 3] > test_stat)
n_obs <- length(ord.cpb)
ord.dif <- (ord.vnb - ord.cpb)/n_obs
num.abv <- mean(ord.cpb)
step <- 1
if(num.abv < 0.05){
while(num.abv < 0.05 & step <= n_obs){
num.abv <- num.abv + ord.dif[step]
step <- step + 1
}
}else{
while(num.abv > 0.95 & step <= n_obs){
num.abv <- num.abv + ord.dif[step]
step <- step + 1
}
}
print(step)
return(ord.obs[step, 1])
}
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 100)
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 100)
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 100)
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 100)
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 100)
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 100)
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 1000)
sort_lambda <- function(observations, test_stat){
ord.obs <- observations[order(observations[, 1]), ]
ord.vnb <- as.numeric(ord.obs[, 2] > test_stat)
ord.cpb <- as.numeric(ord.obs[, 3] > test_stat)
n_obs <- length(ord.cpb)
ord.dif <- (ord.vnb - ord.cpb)/n_obs
num.abv <- mean(ord.cpb)
step <- 1
if(num.abv < 0.05){
while(num.abv < 0.05 & step <= n_obs){
num.abv <- num.abv + ord.dif[step]
step <- step + 1
}
}else{
while(num.abv > 0.95 & step <= n_obs){
num.abv <- num.abv + ord.dif[step]
step <- step + 1
}
}
print(step)
return(ord.obs[step - 1, 1])
}
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 1000)
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 1000)
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 1000)
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 1000)
sort_lambda <- function(observations, test_stat){
ord.obs <- observations[order(observations[, 1]), ]
ord.vnb <- as.numeric(ord.obs[, 2] > test_stat)
ord.cpb <- as.numeric(ord.obs[, 3] > test_stat)
n_obs <- length(ord.cpb)
ord.dif <- (ord.vnb - ord.cpb)/n_obs
num.abv <- mean(ord.cpb)
step <- 1
if(num.abv < 0.05){
while(num.abv < 0.05 & step <= n_obs){
num.abv <- num.abv + ord.dif[step]
step <- step + 1
}
}else{
while(num.abv > 0.95 & step <= n_obs){
num.abv <- num.abv + ord.dif[step]
step <- step + 1
}
}
print(step)
return(ord.obs[min(step, n_obs), 1])
}
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 10, lambda = "db", 1000)
hist(bb)
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = diag(5)), 1000, lambda = "db", 1000)
hist(bb)
mat <- diag(5)
mat[1,2] <- mat[2, 1] <- 0.7
mat
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = mat), 1000, lambda = "db", 1000)
hist(bb)
hist(bb[-which.min(bb)])
sort_lambda <- function(observations, test_stat){
ord.obs <- observations[order(observations[, 1]), ]
ord.vnb <- as.numeric(ord.obs[, 2] > test_stat)
ord.cpb <- as.numeric(ord.obs[, 3] > test_stat)
n_obs <- length(ord.cpb)
ord.dif <- (ord.vnb - ord.cpb)/n_obs
num.abv <- mean(ord.cpb)
step <- 1
if(num.abv < 0.05){
while(num.abv < 0.05 & step < n_obs){
num.abv <- num.abv + ord.dif[step]
step <- step + 1
}
}else{
while(num.abv > 0.95 & step < n_obs){
num.abv <- num.abv + ord.dif[step]
step <- step + 1
}
}
print(step)
browser()
return(ord.obs[step, 1])
}
hist(bb[-which.min(bb)])
bb <- art_find_distr(mvrnorm(n = 50, mu = rep(0, 5), Sigma = mat), 1000, lambda = "db", 1000)
test_stat
mean(test_stat < ord.vnb)
mean(test_stat < ord.cpb)
num.abv + ord.diff
num.abv + ord.dif
ord.cpb
mean(ord.cpb)
mean(ord.vnb)
num.abv + ord.dif
cumsum(num.abv, c(ord.dif))
cumsum(c(num.abv, ord.dif))
mean(ord.vnb)
mean(ord.vnb)
mean(ord.cpb)
ord.obs[step, 1]
library(MASS)
single_bootstrap <- function(data, ifc, sims, norms = c("max"), shift = 0){
num_norms <- length(norms)
num_obs <- nrow(data)
my_data <- data
param_est_vals <- est_spearman(my_data)
ic_ests <- est_influence_spearman(my_data)
nu_matrix <- matrix(rnorm(sims * num_obs), nrow = num_obs, ncol = sims)
level_1_boot <- gen_boot_sample(nu_matrix, ic_ests, center = TRUE, param_est_vals)
l_p_res <- rep(NA, nrow = num_norms * 2 )
for(norm_indx in 1:num_norms){
l_p_distr.shift <- apply(level_1_boot + shift, 2, l_p_norm, p = norms[norm_indx])
l_p_distr.centr <- apply(level_1_boot        , 2, l_p_norm, p = norms[norm_indx])
lp.z.crit <- quantile(l_p_distr.centr, 0.95)
est.power <- mean(l_p_distr.shift > lp.z.crit)
lp.test.stat <- sqrt(num_obs) * l_p_norm(param_est_vals, p = norms[norm_indx])
l_p_res[(2 * norm_indx - 1) : (2 * norm_indx) ] <- c(as.numeric(lp.z.crit < lp.test.stat ),
est.power)# sample(l_p_distr, 1)
}
return(l_p_res)
}
test.local.alternative <- function(ss, norms = c("max"), sims, pos.covs, dim, shift.size){
sim.data.cov <- diag(dim + 1)
n.pos.cov <- length(pos.covs)
local.shift <- shift.size * pos.covs/(sqrt(ss) * max(1, l_p_norm(pos.covs, p = 2)))
sim.data.cov[1, 2:(n.pos.cov + 1)] <- sim.data.cov[2:(n.pos.cov + 1), 1] <- local.shift
sim.data.base <- mvrnorm(100000, mu = rep(0, dim + 1), Sigma = sim.data.cov)
true.shift <- round(cor(sim.data.base, method = "spearman")[-1, 1] * sqrt(ss), 1)
print(true.shift)
boot.results <- matrix(NA, ncol = 2 * length(norms), nrow = sims)
for(monte.indx in 1:sims){
monte.data <- mvrnorm(n = ss, mu = rep(0, dim + 1), Sigma = sim.data.cov)
boot.results[monte.indx, ] <- single_bootstrap(monte.data, NA, 1000,
norms = norms, shift = true.shift)
if (monte.indx%%100 == 0) cat(monte.indx)
}
return(boot.results)
}
est_influence_pearson <- function(observ){
n <- nrow(observ)
num_cov <- ncol(observ) - 1
est_IC <- matrix(NA, nrow = n, ncol = num_cov)
means <- colMeans(observ)
y_mean <- means[1]
cent_obs <- observ - matrix(rep(colMeans(observ), each = n), nrow = n)
cent_obs_sqrd <- cent_obs^2
sigmas <- colSums(cent_obs_sqrd)/(n - 1)
covs <- as.numeric(crossprod(cent_obs[, 1], cent_obs[, -1]))/(n - 1)
y_var <- sigmas[1]
cent_cov <- cent_obs[, -1] * cent_obs[, 1] - rep(covs, each = n)
cent_var <- cent_obs_sqrd - rep(sigmas, each = n)
psi_1 <- matrix(rep(sigmas[-1], each = n), nrow = n) * cent_var[, 1] + y_var * cent_var[, -1]
ic <- (cent_cov - psi_1 * rep(covs/(y_var * sigmas[-1]), each = n)) *
rep((1/sqrt(y_var * sigmas[-1])), each = n)
return(ic)
}
est_pearson <- function(observ){
num_var <- ncol(observ)
return(cor(observ[, 1], observ[, -1], method = "pearson"))
}
pearson <- list("est_IC" = est_influence_pearson, "est_param" = est_pearson)
single_bootstrap <- function(data, ifc, sims, norms = c("max"), shift = 0){
num_norms <- length(norms)
num_obs <- nrow(data)
my_data <- data
param_est_vals <- est_pearson(my_data)
ic_ests <- est_influence_pearson(my_data)
nu_matrix <- matrix(rnorm(sims * num_obs), nrow = num_obs, ncol = sims)
level_1_boot <- gen_boot_sample(nu_matrix, ic_ests, center = TRUE, param_est_vals)
l_p_res <- rep(NA, nrow = num_norms * 2 )
for(norm_indx in 1:num_norms){
l_p_distr.shift <- apply(level_1_boot + shift, 2, l_p_norm, p = norms[norm_indx])
l_p_distr.centr <- apply(level_1_boot        , 2, l_p_norm, p = norms[norm_indx])
lp.z.crit <- quantile(l_p_distr.centr, 0.95)
est.power <- mean(l_p_distr.shift > lp.z.crit)
lp.test.stat <- sqrt(num_obs) * l_p_norm(param_est_vals, p = norms[norm_indx])
l_p_res[(2 * norm_indx - 1) : (2 * norm_indx) ] <- c(as.numeric(lp.z.crit < lp.test.stat ),
est.power)# sample(l_p_distr, 1)
}
return(l_p_res)
}
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10), NA, 10, norms = c(2, "max"), shift = 0)
)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
gen_boot_sample <- function(epsilon_mat , obs_ic, center = TRUE, param_est = 0, rate = "rootn"){
num_obs <- nrow(epsilon_mat)
if (rate == "rootn"){
cent_boot <- t(obs_ic) %*% epsilon_mat / sqrt(num_obs)
}else if (rate == "n"){
cent_boot <- t(obs_ic) %*% epsilon_mat / num_obs
}
if(center == TRUE){
return(cent_boot)
}else{
non_cent_boot <- sweep(cent_boot, 1, param_est, "+")
return(non_cent_boot)
}
}
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
l_p_norm <- function(x, p = "max"){
if (p == "max") {
return(max(abs(x)))
} else {
l_p <- as.integer(p)
return(sum(abs(x)^l_p)^(1/l_p))
}
}
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 1000, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 1000, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 1000, mu = rep(0, 10), Sigma = diag(10)), NA, 1000, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 1000, mu = rep(0, 10), Sigma = diag(10)), NA, 1000, norms = c(2, "max"), shift = 0)
test.local.alternative <- function(ss, norms = c("max"), sims, pos.covs, dim, shift.size){
sim.data.cov <- diag(dim + 1)
n.pos.cov <- length(pos.covs)
local.shift <- shift.size * pos.covs/(sqrt(ss) * max(1, l_p_norm(pos.covs, p = 2)))
sim.data.cov[1, 2:(n.pos.cov + 1)] <- sim.data.cov[2:(n.pos.cov + 1), 1] <- local.shift
sim.data.base <- mvrnorm(100000, mu = rep(0, dim + 1), Sigma = sim.data.cov)
true.shift <- round(cor(sim.data.base, method = "spearman")[-1, 1] * sqrt(ss), 1)
print(true.shift)
boot.results <- matrix(NA, ncol = 2 * length(norms), nrow = sims)
for(monte.indx in 1:sims){
monte.data <- mvrnorm(n = ss, mu = rep(0, dim + 1), Sigma = sim.data.cov)
boot.results[monte.indx, ] <- single_bootstrap(monte.data, NA, 1000,
norms = norms, shift = true.shift)
if (monte.indx%%100 == 0) cat(monte.indx)
}
return(boot.results)
}
data <- as.data.frame(bb)
names(data) <- c("ar2", "pow2", "armax", "powmax")
c <- ggplot(data, aes(powmax))
c + geom_histogram(aes(alpha = 1), linetype = 5, binwidth = 0.01) +
theme_minimal() + theme(legend.position="none") +
geom_vline(aes(xintercept = mean(data[, 3]), colour = "red")) +
labs(x = "Bootstrap Estimated Power")
sim.mat.p10  <- matrix(NA, nrow = 3, ncol = 6)
sim.mat.p50  <- matrix(NA, nrow = 3, ncol = 6)
sample.size <- c(50, 100, 300)
direction <- list(c(0, 1), c(1, 1, 2, 2, 1))
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 6, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 5, "max"),
sims, c(0, 1), dim, local.mag)
res.table[1:3, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 5, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[4:6, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 2, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
test.local.alternative <- function(ss, norms = c("max"), sims, pos.covs, dim, shift.size){
sim.data.cov <- diag(dim + 1)
n.pos.cov <- length(pos.covs)
local.shift <- shift.size * pos.covs/(sqrt(ss) * max(1, l_p_norm(pos.covs, p = 2)))
sim.data.cov[1, 2:(n.pos.cov + 1)] <- sim.data.cov[2:(n.pos.cov + 1), 1] <- local.shift
true.shift <- local.shift
print(true.shift)
boot.results <- matrix(NA, ncol = 2 * length(norms), nrow = sims)
for(monte.indx in 1:sims){
monte.data <- mvrnorm(n = ss, mu = rep(0, dim + 1), Sigma = sim.data.cov)
boot.results[monte.indx, ] <- single_bootstrap(monte.data, NA, 1000,
norms = norms, shift = true.shift)
if (monte.indx%%100 == 0) cat(monte.indx)
}
return(boot.results)
}
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power1
table.p10.power1 <- make.table(10, 0, 1000)
test.local.alternative <- function(ss, norms = c("max"), sims, pos.covs, dim, shift.size){
sim.data.cov <- diag(dim + 1)
n.pos.cov <- length(pos.covs)
local.shift <- shift.size * pos.covs/(sqrt(ss) * max(1, l_p_norm(pos.covs, p = 2)))
sim.data.cov[1, 2:(n.pos.cov + 1)] <- sim.data.cov[2:(n.pos.cov + 1), 1] <- local.shift
true.shift <- c(local.shift, rep(0, dim - n.pos.cov))
print(true.shift)
boot.results <- matrix(NA, ncol = 2 * length(norms), nrow = sims)
for(monte.indx in 1:sims){
monte.data <- mvrnorm(n = ss, mu = rep(0, dim + 1), Sigma = sim.data.cov)
boot.results[monte.indx, ] <- single_bootstrap(monte.data, NA, 1000,
norms = norms, shift = true.shift)
if (monte.indx%%100 == 0) cat(monte.indx)
}
return(boot.results)
}
table.p10.power0 <- table.p10.power1
table.p10.power0
sample.size <- c(50, 100, 300)
direction <- list(c(0, 1), c(1, 1, 2, 2, 1))
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(0, 1), dim, local.mag)
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[4:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 2, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power2 <- make.table(10, 2, 1000)
table.p10.power4 <- make.table(10, 4, 1000)
table.p70.power1 <- make.table(70, 1, 1000)
sim.re
sim.res
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(0, 1), dim, local.mag)
browswer()
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[4:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 2, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(0, 1), dim, local.mag)
browser()
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[4:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 2, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power1 <- make.table(10, 1, 100)
matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
sim.res
apply(sim.res, 2, mean)
matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
matrix(apply(sim.res, 2, mean), nrow = 4, byrow = TRUE)
matrix(apply(sim.res, 2, mean), nrow = 4)
apply(sim.res, 2, mean)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
test.local.alternative(100, norms = c(2, 4, 8, "max"), 10, c(0, 1), 1)
test.local.alternative(100, norms = c(2, 4, 8, "max"), 10, c(0, 1), 10, shift.size = 1)
table.p10.power1 <- make.table(10, 1, 100)
matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
apply(sim.res, 2, mean)
matrix(apply(sim.res, 2, mean), nrow = 4, byrow = TRUE)
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(0, 1), dim, local.mag)
browser()
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 4, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[4:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 4, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 100)
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(0, 1), dim, local.mag)
browser()
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 4, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[5:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 4, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power1 <- make.table(10, 1, 100)
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(0, 1), dim, local.mag)
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 4, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[5:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 4, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power2 <- make.table(10, 2, 1000)
table.p10.power1
table.p10.power4 <- make.table(10, 4, 1000)
test.local.alternative <- function(ss, norms = c("max"), sims, pos.covs, dim, shift.size){
sim.data.cov <- diag(dim + 1)
n.pos.cov <- length(pos.covs)
local.shift <- shift.size * pos.covs/(sqrt(ss) * max(1, l_p_norm(pos.covs, p = 2)))
sim.data.cov[1, 2:(n.pos.cov + 1)] <- sim.data.cov[2:(n.pos.cov + 1), 1] <- local.shift
true.shift <- c(local.shift, rep(0, dim - n.pos.cov))
cat("\n")
print(true.shift)
boot.results <- matrix(NA, ncol = 2 * length(norms), nrow = sims)
for(monte.indx in 1:sims){
monte.data <- mvrnorm(n = ss, mu = rep(0, dim + 1), Sigma = sim.data.cov)
boot.results[monte.indx, ] <- single_bootstrap(monte.data, NA, 1000,
norms = norms, shift = true.shift)
if (monte.indx%%100 == 0) cat(monte.indx)
}
return(boot.results)
}
table.p10.power4
test.local.alternative <- function(ss, norms = c("max"), sims, pos.covs, dim, shift.size){
sim.data.cov <- diag(dim + 1)
n.pos.cov <- length(pos.covs)
local.shift <- shift.size * pos.covs/(sqrt(ss) * max(1, l_p_norm(pos.covs, p = 2)))
sim.data.cov[1, 2:(n.pos.cov + 1)] <- sim.data.cov[2:(n.pos.cov + 1), 1] <- local.shift
true.shift <- c(local.shift, rep(0, dim - n.pos.cov)) * sqrt(ss)
cat("\n")
print(true.shift)
boot.results <- matrix(NA, ncol = 2 * length(norms), nrow = sims)
for(monte.indx in 1:sims){
monte.data <- mvrnorm(n = ss, mu = rep(0, dim + 1), Sigma = sim.data.cov)
boot.results[monte.indx, ] <- single_bootstrap(monte.data, NA, 1000,
norms = norms, shift = true.shift)
if (monte.indx%%100 == 0) cat(monte.indx)
}
return(boot.results)
}
table.p10.power4 <- make.table(10, 4, 1000)
table.p10.power4 <- make.table(10, 4, 100)
table.p10.power4
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power2 <- make.table(10, 2, 1000)
table.p10.power4 <- make.table(10, 4, 1000)
table.p70.power1 <- make.table(70, 1, 1000)
table.p70.power2 <- make.table(70, 2, 1000)
table.p70.power4 <- make.table(70, 4, 1000)
table.p70.power4
knitr::kable(table.p70.power4, format = "latex", booktabs = TRUE)
install.packages("knitr")
knitr::kable(table.p70.power4, format = "latex", booktabs = TRUE)
knitr::kable(round(table.p70.power4, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p10.power1, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p70.power1, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p10.power2, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p70.power2, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p10.power4, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p70.power4, 3), format = "latex", booktabs = TRUE)
test.local.alternative(100, norms = c(2, 4, 10, "max"),
1000, c(0, 1), 10, 4)
loc_test <- test.local.alternative(100, norms = c(2, 4, 10, "max"),
1000, c(0, 1), 10, 4)
apply(loc_test, 2, mean)
loc_test <- test.local.alternative(100, norms = c(2, 4, 10, "max"),
1000, c(0, 1), 70, 4)
apply(loc_test, 2, mean)
