n.pos.cov <- length(pos.covs)
local.shift <- shift.size * pos.covs/(sqrt(ss) * max(1, l_p_norm(pos.covs, p = 2)))
sim.data.cov[1, 2:(n.pos.cov + 1)] <- sim.data.cov[2:(n.pos.cov + 1), 1] <- local.shift
sim.data.base <- mvrnorm(100000, mu = rep(0, dim + 1), Sigma = sim.data.cov)
true.shift <- round(cor(sim.data.base, method = "spearman")[-1, 1] * sqrt(ss), 1)
print(true.shift)
boot.results <- matrix(NA, ncol = 2 * length(norms), nrow = sims)
for(monte.indx in 1:sims){
monte.data <- mvrnorm(n = ss, mu = rep(0, dim + 1), Sigma = sim.data.cov)
boot.results[monte.indx, ] <- single_bootstrap(monte.data, NA, 1000,
norms = norms, shift = true.shift)
if (monte.indx%%100 == 0) cat(monte.indx)
}
return(boot.results)
}
data <- as.data.frame(bb)
names(data) <- c("ar2", "pow2", "armax", "powmax")
c <- ggplot(data, aes(powmax))
c + geom_histogram(aes(alpha = 1), linetype = 5, binwidth = 0.01) +
theme_minimal() + theme(legend.position="none") +
geom_vline(aes(xintercept = mean(data[, 3]), colour = "red")) +
labs(x = "Bootstrap Estimated Power")
sim.mat.p10  <- matrix(NA, nrow = 3, ncol = 6)
sim.mat.p50  <- matrix(NA, nrow = 3, ncol = 6)
sample.size <- c(50, 100, 300)
direction <- list(c(0, 1), c(1, 1, 2, 2, 1))
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 6, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 5, "max"),
sims, c(0, 1), dim, local.mag)
res.table[1:3, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 5, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[4:6, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 2, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
test.local.alternative <- function(ss, norms = c("max"), sims, pos.covs, dim, shift.size){
sim.data.cov <- diag(dim + 1)
n.pos.cov <- length(pos.covs)
local.shift <- shift.size * pos.covs/(sqrt(ss) * max(1, l_p_norm(pos.covs, p = 2)))
sim.data.cov[1, 2:(n.pos.cov + 1)] <- sim.data.cov[2:(n.pos.cov + 1), 1] <- local.shift
true.shift <- local.shift
print(true.shift)
boot.results <- matrix(NA, ncol = 2 * length(norms), nrow = sims)
for(monte.indx in 1:sims){
monte.data <- mvrnorm(n = ss, mu = rep(0, dim + 1), Sigma = sim.data.cov)
boot.results[monte.indx, ] <- single_bootstrap(monte.data, NA, 1000,
norms = norms, shift = true.shift)
if (monte.indx%%100 == 0) cat(monte.indx)
}
return(boot.results)
}
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power1
table.p10.power1 <- make.table(10, 0, 1000)
test.local.alternative <- function(ss, norms = c("max"), sims, pos.covs, dim, shift.size){
sim.data.cov <- diag(dim + 1)
n.pos.cov <- length(pos.covs)
local.shift <- shift.size * pos.covs/(sqrt(ss) * max(1, l_p_norm(pos.covs, p = 2)))
sim.data.cov[1, 2:(n.pos.cov + 1)] <- sim.data.cov[2:(n.pos.cov + 1), 1] <- local.shift
true.shift <- c(local.shift, rep(0, dim - n.pos.cov))
print(true.shift)
boot.results <- matrix(NA, ncol = 2 * length(norms), nrow = sims)
for(monte.indx in 1:sims){
monte.data <- mvrnorm(n = ss, mu = rep(0, dim + 1), Sigma = sim.data.cov)
boot.results[monte.indx, ] <- single_bootstrap(monte.data, NA, 1000,
norms = norms, shift = true.shift)
if (monte.indx%%100 == 0) cat(monte.indx)
}
return(boot.results)
}
table.p10.power0 <- table.p10.power1
table.p10.power0
sample.size <- c(50, 100, 300)
direction <- list(c(0, 1), c(1, 1, 2, 2, 1))
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(0, 1), dim, local.mag)
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[4:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 2, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power2 <- make.table(10, 2, 1000)
table.p10.power4 <- make.table(10, 4, 1000)
table.p70.power1 <- make.table(70, 1, 1000)
sim.re
sim.res
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(0, 1), dim, local.mag)
browswer()
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[4:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 2, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(0, 1), dim, local.mag)
browser()
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 5, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[4:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 2, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power1 <- make.table(10, 1, 100)
matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
sim.res
apply(sim.res, 2, mean)
matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
matrix(apply(sim.res, 2, mean), nrow = 4, byrow = TRUE)
matrix(apply(sim.res, 2, mean), nrow = 4)
apply(sim.res, 2, mean)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
single_bootstrap(mvrnorm(n = 100, mu = rep(0, 10), Sigma = diag(10)), NA, 10, norms = c(2, "max"), shift = 0)
test.local.alternative(100, norms = c(2, 4, 8, "max"), 10, c(0, 1), 1)
test.local.alternative(100, norms = c(2, 4, 8, "max"), 10, c(0, 1), 10, shift.size = 1)
table.p10.power1 <- make.table(10, 1, 100)
matrix(apply(sim.res, 2, mean), nrow = 2, byrow = TRUE)
apply(sim.res, 2, mean)
matrix(apply(sim.res, 2, mean), nrow = 4, byrow = TRUE)
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(0, 1), dim, local.mag)
browser()
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 4, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[4:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 4, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 100)
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(0, 1), dim, local.mag)
browser()
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 4, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[5:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 4, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power1 <- make.table(10, 1, 100)
make.table <- function(dim, local.mag, sims){
res.table <- matrix(NA, nrow = 8, ncol = 6)
for(jj in 1:3){
sim.res <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(0, 1), dim, local.mag)
res.table[1:4, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res, 2, mean), nrow = 4, byrow = TRUE)
sim.res.2 <- test.local.alternative(sample.size[jj], norms = c(2, 4, 10, "max"),
sims, c(1, 1, 2, 1), dim, local.mag)
res.table[5:8, (jj * 2 - 1) : (jj * 2)] <- matrix(apply(sim.res.2, 2, mean), nrow = 4, byrow = TRUE)
}
return(res.table)
}
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power2 <- make.table(10, 2, 1000)
table.p10.power1
table.p10.power4 <- make.table(10, 4, 1000)
test.local.alternative <- function(ss, norms = c("max"), sims, pos.covs, dim, shift.size){
sim.data.cov <- diag(dim + 1)
n.pos.cov <- length(pos.covs)
local.shift <- shift.size * pos.covs/(sqrt(ss) * max(1, l_p_norm(pos.covs, p = 2)))
sim.data.cov[1, 2:(n.pos.cov + 1)] <- sim.data.cov[2:(n.pos.cov + 1), 1] <- local.shift
true.shift <- c(local.shift, rep(0, dim - n.pos.cov))
cat("\n")
print(true.shift)
boot.results <- matrix(NA, ncol = 2 * length(norms), nrow = sims)
for(monte.indx in 1:sims){
monte.data <- mvrnorm(n = ss, mu = rep(0, dim + 1), Sigma = sim.data.cov)
boot.results[monte.indx, ] <- single_bootstrap(monte.data, NA, 1000,
norms = norms, shift = true.shift)
if (monte.indx%%100 == 0) cat(monte.indx)
}
return(boot.results)
}
table.p10.power4
test.local.alternative <- function(ss, norms = c("max"), sims, pos.covs, dim, shift.size){
sim.data.cov <- diag(dim + 1)
n.pos.cov <- length(pos.covs)
local.shift <- shift.size * pos.covs/(sqrt(ss) * max(1, l_p_norm(pos.covs, p = 2)))
sim.data.cov[1, 2:(n.pos.cov + 1)] <- sim.data.cov[2:(n.pos.cov + 1), 1] <- local.shift
true.shift <- c(local.shift, rep(0, dim - n.pos.cov)) * sqrt(ss)
cat("\n")
print(true.shift)
boot.results <- matrix(NA, ncol = 2 * length(norms), nrow = sims)
for(monte.indx in 1:sims){
monte.data <- mvrnorm(n = ss, mu = rep(0, dim + 1), Sigma = sim.data.cov)
boot.results[monte.indx, ] <- single_bootstrap(monte.data, NA, 1000,
norms = norms, shift = true.shift)
if (monte.indx%%100 == 0) cat(monte.indx)
}
return(boot.results)
}
table.p10.power4 <- make.table(10, 4, 1000)
table.p10.power4 <- make.table(10, 4, 100)
table.p10.power4
table.p10.power1 <- make.table(10, 1, 1000)
table.p10.power2 <- make.table(10, 2, 1000)
table.p10.power4 <- make.table(10, 4, 1000)
table.p70.power1 <- make.table(70, 1, 1000)
table.p70.power2 <- make.table(70, 2, 1000)
table.p70.power4 <- make.table(70, 4, 1000)
table.p70.power4
knitr::kable(table.p70.power4, format = "latex", booktabs = TRUE)
install.packages("knitr")
knitr::kable(table.p70.power4, format = "latex", booktabs = TRUE)
knitr::kable(round(table.p70.power4, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p10.power1, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p70.power1, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p10.power2, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p70.power2, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p10.power4, 3), format = "latex", booktabs = TRUE)
knitr::kable(round(table.p70.power4, 3), format = "latex", booktabs = TRUE)
test.local.alternative(100, norms = c(2, 4, 10, "max"),
1000, c(0, 1), 10, 4)
loc_test <- test.local.alternative(100, norms = c(2, 4, 10, "max"),
1000, c(0, 1), 10, 4)
apply(loc_test, 2, mean)
loc_test <- test.local.alternative(100, norms = c(2, 4, 10, "max"),
1000, c(0, 1), 70, 4)
apply(loc_test, 2, mean)
find_max_cor_beta <- function(data, find_sd = FALSE){
covs <- ncol(data) - 1
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
max.k <- which.max(abs(cors)) + 1
if(find_sd == TRUE){
y.vec <- data[, 1]
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
resids <- y.vec - as.numeric(X %*% betas)
rse <- sum(resids^2)/(ss - 2)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse), resids)
}else{
est <- cors[max.k - 1] / sd(data[, max.k])
}
return(est)
}
bb <- mvrnorm(n = 100, mu = rep(0, 5), diag(5))
library(MASS)
bb <- mvrnorm(n = 100, mu = rep(0, 5), diag(5))
find_max_cor_beta(bb, find_sd = TRUE)[c(1, 2)]
lm(bb[, 1] ~ bb[, -1])
summary(lm(bb[, 1] ~ bb[, -1]))
find_max_cor_beta(bb, find_sd = TRUE)[c(1, 2)]
find_max_cor_beta <- function(data, find_sd = FALSE){
covs <- ncol(data) - 1
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
max.k <- which.max(abs(cors)) + 1
if(find_sd == TRUE){
y.vec <- data[, 1]
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
resids <- y.vec - as.numeric(X %*% betas)
rse <- sum(resids^2)/(ss - 1)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse), resids)
}else{
est <- cors[max.k - 1] / sd(data[, max.k])
}
return(est)
}
find_max_cor_beta(bb, find_sd = TRUE)[c(1, 2)]
summary(lm(bb[, 1] ~ bb[, -1]))
find_max_cor_beta <- function(data, find_sd = FALSE){
covs <- ncol(data) - 1
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
max.k <- which.max(abs(cors)) + 1
if(find_sd == TRUE){
y.vec <- data[, 1]
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
resids <- y.vec - as.numeric(X %*% betas)
rse <- sum(resids^2)/(ss - 2)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse), resids)
}else{
est <- cors[max.k - 1] / sd(data[, max.k])
}
browser()
return(est)
}
find_max_cor_beta(bb, find_sd = TRUE)[c(1, 2)]
cors
colMeans(s.data)
apply(s.data, 2, sd)
apply(s.data, 2, var)
apply(s.data, 2, sd) * sqrt(100 - 1)
find_max_cor_beta <- function(data, find_sd = FALSE){
covs <- ncol(data) - 1
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss) * ((ss-1)/ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
max.k <- which.max(abs(cors)) + 1
if(find_sd == TRUE){
y.vec <- data[, 1]
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
resids <- y.vec - as.numeric(X %*% betas)
rse <- sum(resids^2)/(ss - 2)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse), resids)
}else{
est <- cors[max.k - 1] / sd(data[, max.k])
}
browser()
return(est)
}
find_max_cor_beta <- function(data, find_sd = FALSE){
covs <- ncol(data) - 1
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss) * ((ss-1)/ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
max.k <- which.max(abs(cors)) + 1
if(find_sd == TRUE){
y.vec <- data[, 1]
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
resids <- y.vec - as.numeric(X %*% betas)
rse <- sum(resids^2)/(ss - 2)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse), resids)
}else{
est <- cors[max.k - 1] / sd(data[, max.k])
}
browser()
return(est)
}
find_max_cor_beta(bb, find_sd = TRUE)[c(1, 2)]
lm(data[, 1] ~ data[, -1])
est[1]
est[1]*sqrt(99/100)
est[1]*sqrt(100/99)
est[1]*100/99
cov(s.data)
cors
sd(data)
var(data)
cor(data)
cors
cor(s.data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss) * ((ss-1))
cor(s.data)
cor(data)[1, -1]
cor(s.data)[1, -1]
cors <- crossprod(s.data[, -1], s.data[, 1])
cors
cor(s.data)[1, -1]/cors
cors/cor(s.data)[1, -1]
sqrt(9810)
sqrt(9801)
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
cors/cor(s.data)[1, -1]
max.k <- which.max(abs(cors)) + 1
est <- cors[max.k - 1] / sd(data[, max.k])
est
lm(data[, 1] ~ data[, -1])
cors[max.k - 1]
sd(data[, max.k])
est/-0.29632
summary(lm(data[, 1] ~ data[, -1]))
find_max_cor_beta <- function(data, find_sd = FALSE){
covs <- ncol(data) - 1
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
max.k <- which.max(abs(cors)) + 1
if(find_sd == TRUE){
y.vec <- data[, 1]
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
resids <- y.vec - as.numeric(X %*% betas)
rse <- sum(resids^2)/(ss - 2)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse), resids)
}else{
est <- cors[max.k - 1] * sd(data[, max.k]) / sd(data[, max.k])
}
browser()
return(est)
}
find_max_cor_beta <- function(data, find_sd = FALSE){
covs <- ncol(data) - 1
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
max.k <- which.max(abs(cors)) + 1
if(find_sd == TRUE){
y.vec <- data[, 1]
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
resids <- y.vec - as.numeric(X %*% betas)
rse <- sum(resids^2)/(ss - 2)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse), resids)
}else{
est <- cors[max.k - 1] * sd(data[, max.k]) / sd(data[, max.k])
}
browser()
return(est)
}
find_max_cor_beta(bb, find_sd = TRUE)[c(1, 2)]
est
est[1]
lm(data[, 1] ~ data[, -1])
est <- cors[max.k - 1] * sd(data[, 1]) / sd(data[, max.k])
est
est <- cors[max.k - 1] * sd(data[, 1]) / sd(data[, max.k - 1])
est
est <- cors[max.k - 1] * sqrt(var(data[, 1]) / var(data[, max.k]))
est
max.k
sd(data[, 1])
-.29632/-0.2845243
sd(data[, 1])^2
sd(data[, 1])**(1/2)
cor(data[, 1] , data[, -1])
cor(data[, 1] , data[, -1]) * sd(data[, 1])/sd(data[, 4])
lm(data[, 1] ~ data[, -1])$coefficient[4]
quag <- lm(data[, 1] ~ data[, -1])$coefficient[4]
(cor(data[, 1] , data[, -1]) * sd(data[, 1])/sd(data[, 4]))[3]/quag
X <- cbind(1, data[, -1])
solve(t(X) %*% X) %*% t(X) %*% data[, 1]
cov(data[, 1], data[, -1])/var(data[, 1], data[, -1])
cov(data[, 1], data[, -1])/var(data[, -1])
cov(data[, 1], data[, -1])/apply(data[, -1], 2, var)
beta_est <- solve(t(X) %*% X) %*% t(X) %*% data[, 1]
cov(data[, 1], data[, -1])/apply(data[, -1], 2, var)/beta_est
cov(data[, 1], data[, -1])/apply(data[, -1], 2, var)/t(beta_est)
cov(data[, 1], data[, -1])/apply(data[, -1], 2, var)
cov(data[, 1], data[, -1])/apply(data[, -1], 2, var)/as.numeric(t(beta_est))
cov(data[, 1], data[, -1])/apply(data[, -1], 2, var)/as.numeric(t(beta_est)[-1])
find_max_cor_beta(bb, find_sd = TRUE)[c(1, 2)]
betas
lm(data[, 1] ~ data[, 4])
est
est[1]
find_max_cor_beta <- function(data, find_sd = FALSE){
covs <- ncol(data) - 1
ss <- nrow(data)
s.data <- data - rep(colMeans(data), each = ss)
s.data <- s.data / rep(sqrt(colSums(s.data^2)), each = ss)
cors <- crossprod(s.data[, -1], s.data[, 1])
max.k <- which.max(abs(cors)) + 1
if(find_sd == TRUE){
y.vec <- data[, 1]
TX <- rbind(1, data[, max.k])
X <- t(TX)
XTXinv <- solve(TX %*% X)
betas <- XTXinv %*% TX %*% y.vec
resids <- y.vec - as.numeric(X %*% betas)
rse <- sum(resids^2)/(ss - 2)
est <- c(betas[2], betas[2]/sqrt(XTXinv[2, 2] * rse), resids)
}else{
est <- cors[max.k - 1] * sqrt(var(data[, 1]) / var(data[, max.k]))
}
return(est)
}
